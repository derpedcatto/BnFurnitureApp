// <auto-generated />
using System;
using BnFurniture.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BnFurniture.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240606201341_SeedOrderStatus")]
    partial class SeedOrderStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BnFurniture.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserActivityTypeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserActivityTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.Characteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Characteristic");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.CharacteristicValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CharacteristicId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("CharacteristicValue");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Discount")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Price")
                        .HasPrecision(19, 2)
                        .HasColumnType("decimal(19,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Обрабатывается"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Комплектуется"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Передан в службу доставки"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Доставляется"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ожидает клиента в пунтке самовывоза"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Выполнен"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Отменён"
                        });
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.PasswordResetToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetToken");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d686a66-ce10-4570-a38a-7bd11c5552d4"),
                            Name = "DashboardAccess"
                        },
                        new
                        {
                            Id = new Guid("836a338f-df53-47e4-89c3-5bef622a5100"),
                            Name = "UpdateAccess"
                        },
                        new
                        {
                            Id = new Guid("38f9001a-0559-444f-bcfc-e3e6842b15d0"),
                            Name = "DeleteAccess"
                        },
                        new
                        {
                            Id = new Guid("fd2d5e1f-9e8c-413e-a9b9-6050e06a5f15"),
                            Name = "CreateAccess"
                        });
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("ProductDetails")
                        .HasColumnType("longtext");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Summary")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Product");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductArticle", b =>
                {
                    b.Property<Guid>("Article")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Discount")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasPrecision(19, 2)
                        .HasColumnType("decimal(19,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Article");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductArticle");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductArticle_OrderItem", b =>
                {
                    b.Property<Guid?>("OrderItemId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductArticleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("char(36)");

                    b.HasKey("OrderItemId", "ProductArticleId");

                    b.HasIndex("ProductArticleId");

                    b.ToTable("ProductArticle_OrderItem");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductCharacteristicConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CharacteristicId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CharacteristicValueId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CharacteristicId");

                    b.HasIndex("CharacteristicValueId");

                    b.ToTable("ProductCharacteristicConfiguration");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductMetrics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<long>("Sales")
                        .HasColumnType("bigint");

                    b.Property<long>("Views")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductMetrics");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Rating")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReview");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("SetCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Summary")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("SetCategoryId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("ProductSet");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductSetCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("ProductSetCategory");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductSetItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductSetId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductSetId");

                    b.ToTable("ProductSetItem");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("adad13d5-2468-4f9c-9ddc-b0940569df8a"),
                            Email = "sashavannovski@gmail.com",
                            FirstName = "Oleksandr",
                            LastName = "Vannovskyi",
                            Password = "8C6976E5B5410415BDE908BD4DEE15DFB167A9C873FC4BB8A81F6F2AB448A918",
                            RegisteredAt = new DateTime(2024, 6, 6, 23, 13, 39, 354, DateTimeKind.Local).AddTicks(9039)
                        });
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.UserActivityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("UserActivityType");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("983b8cba-0ef6-47d2-a140-f6fad0c37b99"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.UserRole_Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRole_Permission");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10572301-e650-453f-8788-97e9a72c9924"),
                            PermissionId = new Guid("6d686a66-ce10-4570-a38a-7bd11c5552d4"),
                            UserRoleId = new Guid("983b8cba-0ef6-47d2-a140-f6fad0c37b99")
                        },
                        new
                        {
                            Id = new Guid("9bcaee7c-12f3-465e-b711-4e80bdffc343"),
                            PermissionId = new Guid("836a338f-df53-47e4-89c3-5bef622a5100"),
                            UserRoleId = new Guid("983b8cba-0ef6-47d2-a140-f6fad0c37b99")
                        },
                        new
                        {
                            Id = new Guid("e3073405-1b66-485b-842d-3bd3035a6f88"),
                            PermissionId = new Guid("38f9001a-0559-444f-bcfc-e3e6842b15d0"),
                            UserRoleId = new Guid("983b8cba-0ef6-47d2-a140-f6fad0c37b99")
                        },
                        new
                        {
                            Id = new Guid("60ff4faf-93fb-4dfd-b263-ee923b46fe3b"),
                            PermissionId = new Guid("fd2d5e1f-9e8c-413e-a9b9-6050e06a5f15"),
                            UserRoleId = new Guid("983b8cba-0ef6-47d2-a140-f6fad0c37b99")
                        });
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.UserWishlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserWishlist");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.UserWishlistItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ProductArticleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserWishlistId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProductArticleId");

                    b.HasIndex("UserWishlistId");

                    b.ToTable("UserWishlistItem");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.User_UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserRoleId");

                    b.ToTable("User_UserRole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dd524a86-9a5e-48cc-ba72-2782fbef9346"),
                            UserId = new Guid("adad13d5-2468-4f9c-9ddc-b0940569df8a"),
                            UserRoleId = new Guid("983b8cba-0ef6-47d2-a140-f6fad0c37b99")
                        });
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("BnFurniture.Domain.Entities.UserActivityType", "UserActivityType")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserActivityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BnFurniture.Domain.Entities.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserActivityType");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.CharacteristicValue", b =>
                {
                    b.HasOne("BnFurniture.Domain.Entities.Characteristic", "Characteristic")
                        .WithMany("CharacteristicValues")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Characteristic");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.Order", b =>
                {
                    b.HasOne("BnFurniture.Domain.Entities.OrderStatus", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BnFurniture.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("BnFurniture.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.PasswordResetToken", b =>
                {
                    b.HasOne("BnFurniture.Domain.Entities.User", "User")
                        .WithMany("PasswordResetTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.Product", b =>
                {
                    b.HasOne("BnFurniture.Domain.Entities.User", "Author")
                        .WithMany("Products")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BnFurniture.Domain.Entities.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductArticle", b =>
                {
                    b.HasOne("BnFurniture.Domain.Entities.User", "Author")
                        .WithMany("ProductArticles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BnFurniture.Domain.Entities.Product", "Product")
                        .WithMany("ProductArticles")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductArticle_OrderItem", b =>
                {
                    b.HasOne("BnFurniture.Domain.Entities.OrderItem", "OrderItem")
                        .WithMany("ProductArticles")
                        .HasForeignKey("OrderItemId")
                        .IsRequired();

                    b.HasOne("BnFurniture.Domain.Entities.ProductArticle", "ProductArticle")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");

                    b.Navigation("ProductArticle");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("BnFurniture.Domain.Entities.ProductCategory", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductCharacteristicConfiguration", b =>
                {
                    b.HasOne("BnFurniture.Domain.Entities.ProductArticle", "ProductArticle")
                        .WithMany("ProductCharacteristicConfigurations")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnFurniture.Domain.Entities.Characteristic", "Characteristic")
                        .WithMany("ProductCharacteristicConfigurations")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BnFurniture.Domain.Entities.CharacteristicValue", "CharacteristicValue")
                        .WithMany("ProductCharacteristicConfigurations")
                        .HasForeignKey("CharacteristicValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Characteristic");

                    b.Navigation("CharacteristicValue");

                    b.Navigation("ProductArticle");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductMetrics", b =>
                {
                    b.HasOne("BnFurniture.Domain.Entities.Product", "Product")
                        .WithOne("Metrics")
                        .HasForeignKey("BnFurniture.Domain.Entities.ProductMetrics", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductReview", b =>
                {
                    b.HasOne("BnFurniture.Domain.Entities.User", "Author")
                        .WithMany("ProductReviews")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnFurniture.Domain.Entities.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductSet", b =>
                {
                    b.HasOne("BnFurniture.Domain.Entities.User", "Author")
                        .WithMany("ProductSets")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BnFurniture.Domain.Entities.ProductSetCategory", "ProductSetCategory")
                        .WithMany("ProductSets")
                        .HasForeignKey("SetCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ProductSetCategory");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductSetCategory", b =>
                {
                    b.HasOne("BnFurniture.Domain.Entities.ProductSetCategory", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductSetItem", b =>
                {
                    b.HasOne("BnFurniture.Domain.Entities.Product", "Product")
                        .WithMany("ProductSetItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnFurniture.Domain.Entities.ProductSet", "ProductSet")
                        .WithMany("ProductSetItems")
                        .HasForeignKey("ProductSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductSet");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductType", b =>
                {
                    b.HasOne("BnFurniture.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("ProductTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.UserRole_Permission", b =>
                {
                    b.HasOne("BnFurniture.Domain.Entities.Permission", "Permission")
                        .WithMany("UserRole_Permissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BnFurniture.Domain.Entities.UserRole", "UserRole")
                        .WithMany("UserRole_Permissions")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.UserWishlist", b =>
                {
                    b.HasOne("BnFurniture.Domain.Entities.User", "User")
                        .WithMany("UserWishlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.UserWishlistItem", b =>
                {
                    b.HasOne("BnFurniture.Domain.Entities.ProductArticle", "ProductArticle")
                        .WithMany("UserWishlistItems")
                        .HasForeignKey("ProductArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnFurniture.Domain.Entities.UserWishlist", "UserWishlist")
                        .WithMany("UserWishlistItems")
                        .HasForeignKey("UserWishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductArticle");

                    b.Navigation("UserWishlist");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.User_UserRole", b =>
                {
                    b.HasOne("BnFurniture.Domain.Entities.User", "User")
                        .WithOne("User_UserRole")
                        .HasForeignKey("BnFurniture.Domain.Entities.User_UserRole", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnFurniture.Domain.Entities.UserRole", "UserRole")
                        .WithMany("User_UserRoles")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.Characteristic", b =>
                {
                    b.Navigation("CharacteristicValues");

                    b.Navigation("ProductCharacteristicConfigurations");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.CharacteristicValue", b =>
                {
                    b.Navigation("ProductCharacteristicConfigurations");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.OrderItem", b =>
                {
                    b.Navigation("ProductArticles");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.Permission", b =>
                {
                    b.Navigation("UserRole_Permissions");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.Product", b =>
                {
                    b.Navigation("Metrics")
                        .IsRequired();

                    b.Navigation("ProductArticles");

                    b.Navigation("ProductReviews");

                    b.Navigation("ProductSetItems");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductArticle", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductCharacteristicConfigurations");

                    b.Navigation("UserWishlistItems");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductCategory", b =>
                {
                    b.Navigation("ProductTypes");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductSet", b =>
                {
                    b.Navigation("ProductSetItems");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductSetCategory", b =>
                {
                    b.Navigation("ProductSets");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Orders");

                    b.Navigation("PasswordResetTokens");

                    b.Navigation("ProductArticles");

                    b.Navigation("ProductReviews");

                    b.Navigation("ProductSets");

                    b.Navigation("Products");

                    b.Navigation("UserWishlists");

                    b.Navigation("User_UserRole")
                        .IsRequired();
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.UserActivityType", b =>
                {
                    b.Navigation("AuditLogs");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.UserRole", b =>
                {
                    b.Navigation("UserRole_Permissions");

                    b.Navigation("User_UserRoles");
                });

            modelBuilder.Entity("BnFurniture.Domain.Entities.UserWishlist", b =>
                {
                    b.Navigation("UserWishlistItems");
                });
#pragma warning restore 612, 618
        }
    }
}
